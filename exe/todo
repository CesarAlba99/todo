#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/todo'

class TodoCLI < Thor
  desc 'list', 'list all tasks'
  def list
    puts todo.list_tasks.to_json
  rescue TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'find', 'Find task by ID'
  def find(id)
    task = todo.find_task id

    return if task.nil?

    puts task.to_json

  rescue TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'delete', 'Delete task by ID'
  def delete(id)                      #no optional arguments should be direct inputs, only optional are options 
    task = todo.delete_task id

    return if task.nil?

    puts task.to_json
  rescue TodoError => e
    puts "ERROR: #{e.message}" 
  end

  desc 'create', 'create task with TITLE'
  option :description, desc: 'Task description'
  option :nodone, desc: 'Mark a task as undone', type: :boolean
  option :done, desc: 'Mark a task as done', type: :boolean
  def create(title)  
    attributes = options.except(:nodone).transform_keys(&:to_sym)    #we use symbols in all the project

    if options[:done]
      attributes[:done] = true
    elsif options[:nodone]
      attributes[:done] = false
    else
      attributes[:done] = false
    end
     task = todo.create_task(title, **attributes)

    return if task.nil?

    puts task.to_json
  rescue TodoError => e
    puts "ERROR: #{e.message}" 
  end

  desc 'edit', 'Edit task by ID'
  option :title, desc: 'New Task title'
  option :description, desc: 'New task description'
  option :done, desc: 'New task done', type: :boolean
  option :nodone, desc: 'Mark task as incomplete', type: :boolean
  def edit(id)
    attributes = options.except(:nodone).transform_keys(&:to_sym)

    if options[:done]
      attributes[:done] = true
    elsif options[:nodone]
      attributes[:done] = false
    end
    task = todo.edit_task(id, **attributes)

    return if task.nil?

    puts task.to_json
  rescue TodoError => e
    puts "ERROR: #{e.message}" 
  end

  no_commands do
    def todo
      @todo ||= Todo.new storage
    end

    def storage
      @storage ||= JsonStorage.new('taskss.json')
    end
  end
end

TodoCLI.start ARGV
